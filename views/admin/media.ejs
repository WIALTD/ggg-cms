<div class="container">
    <div class="media-library">
        <header class="media-header">
            <h1>Media Library</h1>
            <div class="media-actions">
                <button id="createFolderBtn" class="btn btn-secondary">New Folder</button>
                <button id="uploadBtn" class="btn btn-primary">Upload Files</button>
                <input type="file" id="fileInput" multiple accept="image/*" style="display: none;">
            </div>
        </header>

        <!-- Folder Navigation -->
        <nav class="folder-nav">
            <a href="/admin/media" class="folder-link <%= currentFolder === '' ? 'active' : '' %>">
                üìÅ All Files
            </a>
            <% if (folders.length > 0) { %>
                <% folders.forEach(folder => { %>
                    <a href="/admin/media?folder=<%= encodeURIComponent(folder.folder) %>" 
                       class="folder-link <%= currentFolder === folder.folder ? 'active' : '' %>">
                        üìÅ <%= folder.folder %>
                    </a>
                <% }); %>
            <% } %>
        </nav>

        <!-- Upload Drop Zone -->
        <div id="dropZone" class="drop-zone">
            <div class="drop-zone-content">
                <div class="drop-zone-icon">üìÅ</div>
                <h3>Drag & Drop Files Here</h3>
                <p>or <button id="browseBtn" class="btn btn-link">browse files</button></p>
                <p class="drop-zone-info">Supports: JPG, PNG, GIF, WebP (max 5MB each)</p>
            </div>
        </div>

        <!-- Media Grid -->
        <div class="media-grid">
            <% if (media.length === 0) { %>
                <div class="empty-state">
                    <div class="empty-icon">üì∑</div>
                    <h3>No media files</h3>
                    <p>Upload some images to get started</p>
                </div>
            <% } else { %>
                <% media.forEach(file => { %>
                    <div class="media-item" data-id="<%= file.id %>">
                        <div class="media-thumbnail">
                            <% if (file.thumbnail_path) { %>
                                <img src="<%= file.thumbnail_path %>" alt="<%= file.original_name %>" loading="lazy">
                            <% } else { %>
                                <div class="file-icon">üìÑ</div>
                            <% } %>
                            <div class="media-overlay">
                                <button class="media-action-btn preview-btn" data-file="<%= file.file_path %>" title="Preview">
                                    üëÅÔ∏è
                                </button>
                                <button class="media-action-btn rename-btn" data-id="<%= file.id %>" title="Rename">
                                    ‚úèÔ∏è
                                </button>
                                <button class="media-action-btn delete-btn" data-id="<%= file.id %>" title="Delete">
                                    üóëÔ∏è
                                </button>
                            </div>
                        </div>
                        <div class="media-info">
                            <div class="media-name" title="<%= file.original_name %>">
                                <%= file.original_name.length > 20 ? file.original_name.substring(0, 20) + '...' : file.original_name %>
                            </div>
                            <div class="media-meta">
                                <%= Math.round(file.file_size / 1024) %> KB
                                <span class="media-date"><%= new Date(file.uploaded_at).toLocaleDateString() %></span>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } %>
        </div>
    </div>
</div>

<!-- Preview Modal -->
<div id="previewModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 id="previewTitle">File Preview</h3>
            <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <img id="previewImage" src="" alt="Preview" style="max-width: 100%; max-height: 70vh; object-fit: contain;">
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary modal-close">Close</button>
            <button id="copyUrlBtn" class="btn btn-primary">Copy URL</button>
        </div>
    </div>
</div>

<!-- Create Folder Modal -->
<div id="folderModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Create New Folder</h3>
            <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <form id="folderForm">
                <div class="form-group">
                    <label for="folderName">Folder Name</label>
                    <input type="text" id="folderName" name="folderName" required>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary modal-close">Cancel</button>
            <button id="createFolderSubmit" class="btn btn-primary">Create Folder</button>
        </div>
    </div>
</div>

<!-- Rename Modal -->
<div id="renameModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Rename File</h3>
            <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <form id="renameForm">
                <div class="form-group">
                    <label for="newFileName">New Name</label>
                    <input type="text" id="newFileName" name="newName" required>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary modal-close">Cancel</button>
            <button id="renameSubmit" class="btn btn-primary">Rename</button>
        </div>
    </div>
</div>

<script>
// Global variables
let currentFolder = '<%= currentFolder %>';
let currentFileId = null;

// DOM elements
const dropZone = document.getElementById('dropZone');
const fileInput = document.getElementById('fileInput');
const browseBtn = document.getElementById('browseBtn');
const uploadBtn = document.getElementById('uploadBtn');
const createFolderBtn = document.getElementById('createFolderBtn');
const previewModal = document.getElementById('previewModal');
const folderModal = document.getElementById('folderModal');
const renameModal = document.getElementById('renameModal');

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    setupEventListeners();
});

function setupEventListeners() {
    // File upload
    dropZone.addEventListener('dragover', handleDragOver);
    dropZone.addEventListener('dragleave', handleDragLeave);
    dropZone.addEventListener('drop', handleDrop);
    browseBtn.addEventListener('click', () => fileInput.click());
    uploadBtn.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', handleFileSelect);

    // Folder management
    createFolderBtn.addEventListener('click', () => {
        folderModal.style.display = 'block';
        document.getElementById('folderName').focus();
    });

    document.getElementById('createFolderSubmit').addEventListener('click', createFolder);

    // Rename functionality
    document.querySelectorAll('.rename-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            currentFileId = e.target.dataset.id;
            const mediaItem = e.target.closest('.media-item');
            const currentName = mediaItem.querySelector('.media-name').textContent;
            document.getElementById('newFileName').value = currentName;
            renameModal.style.display = 'block';
            document.getElementById('newFileName').focus();
        });
    });

    document.getElementById('renameSubmit').addEventListener('click', renameFile);

    // Delete functionality
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            if (confirm('Are you sure you want to delete this file?')) {
                deleteFile(e.target.dataset.id);
            }
        });
    });

    // Preview functionality
    document.querySelectorAll('.preview-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const filePath = e.target.dataset.file;
            const mediaItem = e.target.closest('.media-item');
            const fileName = mediaItem.querySelector('.media-name').textContent;
            
            document.getElementById('previewTitle').textContent = fileName;
            document.getElementById('previewImage').src = filePath;
            previewModal.style.display = 'block';
        });
    });

    // Copy URL functionality
    document.getElementById('copyUrlBtn').addEventListener('click', copyUrl);

    // Modal close functionality
    document.querySelectorAll('.modal-close').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.target.closest('.modal').style.display = 'none';
        });
    });

    // Close modals when clicking outside
    window.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });
}

// Drag and drop handlers
function handleDragOver(e) {
    e.preventDefault();
    dropZone.classList.add('drag-over');
}

function handleDragLeave(e) {
    e.preventDefault();
    dropZone.classList.remove('drag-over');
}

function handleDrop(e) {
    e.preventDefault();
    dropZone.classList.remove('drag-over');
    
    const files = Array.from(e.dataTransfer.files);
    uploadFiles(files);
}

function handleFileSelect(e) {
    const files = Array.from(e.target.files);
    uploadFiles(files);
}

// File upload function
async function uploadFiles(files) {
    const formData = new FormData();
    
    files.forEach(file => {
        formData.append('files', file);
    });
    
    if (currentFolder) {
        formData.append('folder', currentFolder);
    }

    try {
        const response = await fetch('/admin/media/upload', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            location.reload(); // Refresh to show new files
        } else {
            alert('Upload failed: ' + result.error);
        }
    } catch (error) {
        console.error('Upload error:', error);
        alert('Upload failed. Please try again.');
    }
}

// Folder management
async function createFolder() {
    const folderName = document.getElementById('folderName').value.trim();
    
    if (!folderName) {
        alert('Please enter a folder name');
        return;
    }

    try {
        const response = await fetch('/admin/media/folder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ folderName })
        });

        const result = await response.json();

        if (result.success) {
            folderModal.style.display = 'none';
            document.getElementById('folderName').value = '';
            location.reload(); // Refresh to show new folder
        } else {
            alert('Failed to create folder: ' + result.error);
        }
    } catch (error) {
        console.error('Folder creation error:', error);
        alert('Failed to create folder. Please try again.');
    }
}

// File rename
async function renameFile() {
    const newName = document.getElementById('newFileName').value.trim();
    
    if (!newName) {
        alert('Please enter a new name');
        return;
    }

    try {
        const response = await fetch(`/admin/media/rename/${currentFileId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ newName })
        });

        const result = await response.json();

        if (result.success) {
            renameModal.style.display = 'none';
            document.getElementById('newFileName').value = '';
            location.reload(); // Refresh to show updated name
        } else {
            alert('Failed to rename file: ' + result.error);
        }
    } catch (error) {
        console.error('Rename error:', error);
        alert('Failed to rename file. Please try again.');
    }
}

// File deletion
async function deleteFile(fileId) {
    try {
        const response = await fetch(`/admin/media/delete/${fileId}`, {
            method: 'POST'
        });

        const result = await response.json();

        if (result.success) {
            location.reload(); // Refresh to remove deleted file
        } else {
            alert('Failed to delete file: ' + result.error);
        }
    } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete file. Please try again.');
    }
}

// Copy URL to clipboard
async function copyUrl() {
    const imageUrl = document.getElementById('previewImage').src;
    
    try {
        await navigator.clipboard.writeText(imageUrl);
        alert('URL copied to clipboard!');
    } catch (error) {
        console.error('Copy error:', error);
        alert('Failed to copy URL');
    }
}
</script>

